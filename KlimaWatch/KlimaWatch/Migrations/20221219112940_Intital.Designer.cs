// <auto-generated />
using System;
using KlimaWatch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KlimaWatch.Migrations
{
    [DbContext(typeof(KlimaWatchContext))]
    [Migration("20221219112940_Intital")]
    partial class Intital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KlimaWatch.Data.Entities.Nodes.NodeInfo", b =>
                {
                    b.Property<string>("DeviceEui")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Altitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorType")
                        .HasColumnType("int");

                    b.HasKey("DeviceEui");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("KlimaWatch.Data.Entities.Nodes.NodeMessage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceEui")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NodeInfoDeviceEui")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpreadingFactor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NodeInfoDeviceEui");

                    b.ToTable("NodeMessages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NodeMessage");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KlimaWatch.Data.Entities.OwmModels.HourlyWeather", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceEui")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<string>("NodeInfoDeviceEui")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Pressure")
                        .HasColumnType("float");

                    b.Property<DateTime>("Sunrise")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Sunset")
                        .HasColumnType("datetime2");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<string>("WeatherDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherMain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WindDir")
                        .HasColumnType("int");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NodeInfoDeviceEui");

                    b.ToTable("HourlyWeatherSet");
                });

            modelBuilder.Entity("KlimaWatch.Data.Entities.Nodes.IndoorNodeMessage", b =>
                {
                    b.HasBaseType("KlimaWatch.Data.Entities.Nodes.NodeMessage");

                    b.Property<int>("Light")
                        .HasColumnType("int");

                    b.Property<double>("Pressure")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("IndoorNodeMessage");
                });

            modelBuilder.Entity("KlimaWatch.Data.Entities.Nodes.OutdoorNodeMessage", b =>
                {
                    b.HasBaseType("KlimaWatch.Data.Entities.Nodes.NodeMessage");

                    b.Property<double?>("BatteryVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("Humidity")
                        .HasColumnType("float");

                    b.Property<double?>("Illumination")
                        .HasColumnType("float");

                    b.Property<double?>("IndoorTemp")
                        .HasColumnType("float");

                    b.Property<double?>("OutdoorTemp")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("OutdoorNodeMessage");
                });

            modelBuilder.Entity("KlimaWatch.Data.Entities.Nodes.NodeMessage", b =>
                {
                    b.HasOne("KlimaWatch.Data.Entities.Nodes.NodeInfo", "NodeInfo")
                        .WithMany()
                        .HasForeignKey("NodeInfoDeviceEui");

                    b.Navigation("NodeInfo");
                });

            modelBuilder.Entity("KlimaWatch.Data.Entities.OwmModels.HourlyWeather", b =>
                {
                    b.HasOne("KlimaWatch.Data.Entities.Nodes.NodeInfo", "NodeInfo")
                        .WithMany()
                        .HasForeignKey("NodeInfoDeviceEui");

                    b.Navigation("NodeInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
